using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

//-------------------------------------------------------------------------------------------
//  classes in this file extend the BusinessCalendar classes auto-generated by the xsd tool
//-------------------------------------------------------------------------------------------

namespace C2InfoSys.Schedule {

    /// <summary>
    /// Holiday Schedules
    /// </summary>
    public enum HolidaySchedule {
        None,   // No Holidays
        US, // United States
        CA, // Canada
        UK, // United Kingdom
    }

    public enum RelativeInd {
        First,
        Last,
        Begin,
        End        
    }

    public enum DatePart {
        Year,
        Quarter,
        Month,
        Week,
        Day
    }

    /// <summary>
    /// Business Calendar
    /// </summary>
    public partial class BusinessCalendar {
        
        /// <summary>
        /// Constructor
        /// </summary>
        public BusinessCalendar() {
            yearField = new Year[0];
        }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="p_code">calendar code</param>
        /// <param name="p_desc">calendar name</param>
        public BusinessCalendar(string p_code, string p_desc)
            : this() {
            Code = p_code;
            Desc = p_desc;
        }

        public Day FirstBusinessDay(int p_year) {
            return null;
        }

        /// <summary>
        /// Get the next business day relative to the parameter date
        /// </summary>
        /// <param name="p_Ref"></param>
        /// <returns></returns>
        public Day NextBusinessDay(DateTime p_Ref) {
            try {
                DateTime Ref = p_Ref;
                while (true) {
                    Ref = Ref.AddDays(1.0);
                    Day D = GetDay(Ref);
                    if (D.BusinessDay == YesNo.Y) {
                        return D;
                    }                    
                }            
            }
            catch (Exception ex) {
                throw ex;
            }
        }

        /// <summary>
        /// Get the previous business day relative to the parameter date
        /// </summary>
        /// <param name="p_Ref"></param>
        /// <returns></returns>
        public Day PrevBusinessDay(DateTime p_Ref) {
            try {
                DateTime Ref = p_Ref;
                while (true) {
                    Ref = Ref.AddDays(-1.0);
                    Day D = GetDay(Ref);
                    if (D.BusinessDay == YesNo.Y) {
                        return D;
                    }                    
                }
            }
            catch (Exception ex) {
                throw ex;
            }
        }

        /// <summary>
        /// Get Day
        /// </summary>
        /// <param name="p_year">year</param>
        /// <param name="p_month">month</param>
        /// <param name="p_day">day</param>
        /// <returns>the Day</returns>
        public Day GetDay(int p_year, int p_month, int p_day) {
            try {                
                foreach (Year Y in Year) {
                    if (Y.No == p_year) {
                        return Y.Month[p_month - 1].Day[p_day - 1];
                    }
                }
                return null;
            }
            catch (Exception ex) {
                throw ex;
            }
        }
        public Day GetDay(DateTime p_Date) {
            return GetDay(p_Date.Year, p_Date.Month, p_Date.Day);
        }

        /// <summary>
        /// Get Today
        /// </summary>
        /// <returns>Today</returns>
        public Day Today() {
            try {
                return GetDay(DateTime.Today);                
            }
            catch (Exception ex) {
                throw ex;
            }
        }

        /// <summary>
        /// Add a year to the calendar
        /// </summary>
        /// <param name="p_yearNo">year number</param>
        public Year AddYear(int p_yearNo) {
            // can't add a year that already exists in this calendar            
            foreach (Year Y in Year) {
                if (Y.Equals(Year)) {
                    throw new InvalidOperationException("Year: " + Year.ToString() + " already exists in BusinessCalendar");
                }
            }
            // create the new year
            Year NewYear = new Year(p_yearNo, HolidaySchedule.None);           
            // add the new year to the end of the array
            Array.Resize<Year>(ref yearField, Year.Length + 1);
            Year[Year.Length - 1] = NewYear;    
            // initialize the BusinessCalendar 
            Init();
            // return the year
            return NewYear;
        }

        /// <summary>
        /// Build calendar object hierarchy
        /// </summary>
        public void Init() {            
            // initialize each calendar year within this calendar
            foreach (Year Y in Year) {
                Y.Init(this);
            }
            // sort the list
            Array.Sort<Year>(Year);
        }

    }   // end of class

    /// <summary>
    /// Year
    /// </summary>
    public partial class Year : IComparable<Year>, IEquatable<Year> {

        // parent business calendar
        private BusinessCalendar m_BusinessCalendar;        

        /// <summary>
        /// All the days of the year
        /// </summary>
        public Day[] Day {
            get {
                return m_Day;
            }
        }
        /// <summary>
        /// All the business days of the year
        /// </summary>
        public Day[] BusinessDay {
            get {
                return Day.Where(TheDay => TheDay.BusinessDay == YesNo.Y).ToArray<Day>();
            }
        }
        /// <summary>
        /// All quarter end dates of the year
        /// </summary>
        public Day[] QuarterEnds {
            get {
                return Day.Where(TheDay => TheDay.QuarterEndSpecified).ToArray<Day>();
            }
        }
        // member
        private Day[] m_Day;

        /// <summary>
        /// Get the first day of the year
        /// </summary>        
        public Day FirstDay {
            get {
                return Day.First();                
            }
        }

        /// <summary>
        /// Get the first business day of the year
        /// </summary>        
        public Day FirstBusinessDay {
            get {
                return Day.First(TheDay => TheDay.BusinessDay == YesNo.Y);
            }
        }

        /// <summary>
        /// Get the last day of the year
        /// </summary>        
        public Day LastDay {
            get {
                return Day.Last();
            }
        }

        /// <summary>
        /// Get the first business day of the year
        /// </summary>        
        public Day LastBusinessDay {
            get {
                return Day.Last(TheDay => TheDay.BusinessDay == YesNo.Y);
            }
        }

        /// <summary>
        /// Get the end date of a specific quarter
        /// </summary>
        /// <param name="p_quarter">the quarter</param>
        /// <returns>quarter end Day object</returns>
        public Day QuarterEnd(Quarter p_quarter) {
            // get the quarter end date
            Day[] Q = Day.Where(TheDay => TheDay.QuarterEnd == p_quarter).ToArray<Day>();
            // sanity check
            if (Q.Length == 0) {
                throw new InvalidOperationException("end date for Qx YEARx is not specified by the business calendar");
            }
            if (Q.Length > 1) {
                throw new InvalidOperationException("multiple end dates for Qx YEARx are specified by the business calendar");
            }
            // return the quarter end date
            return Q[0];
        }

        /// <summary>
        /// Constructor
        /// </summary>
        public Year() {
            monthField = new Month[0];
            m_Day = new Day[0];
        }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="p_yearNo">year number</param>
        public Year(int p_yearNo, HolidaySchedule p_holiday)
            : this() {
            Construct(p_yearNo, p_holiday);
        }

        /// <summary>
        /// Construct this year object based on the passed parameters
        /// </summary>
        /// <param name="p_yearNo">year number</param>
        /// <param name="p_holiday">holiday schedule</param>
        private void Construct(int p_yearNo, HolidaySchedule p_holiday) {
            // set the year
            No = p_yearNo;
            // a seed date
            DateTime TheDay = new DateTime(p_yearNo, 1, 1);
            LeapYear = DateTime.IsLeapYear(p_yearNo) ? YesNo.Y : YesNo.N;
            int daysInYear = LeapYear == YesNo.Y ? 366 : 365;            
            m_Day = new Day[daysInYear];
            monthField = new Month[12];
            // create the months
            for (int monthNo = 1; monthNo < 13; monthNo++) {
                Month[monthNo - 1] = new Month(this, monthNo);                
            }            
        }

        /// <summary>
        /// Build calendar object hierarchy
        /// </summary>
        /// <param name="p_BusinessCalendar">parent business calendar</param>
        public void Init(BusinessCalendar p_BusinessCalendar) {
            // set parent business calendar object
            m_BusinessCalendar = p_BusinessCalendar;
            // initialize each month in this year
            foreach (Month M in Month) {
                M.Init(this);
            }
            // sort the list
            Array.Sort<Month>(Month);
            // build the list of days
            int dayCount = 0;
            m_Day = new Day[LeapYear == YesNo.Y ? 366 : 365];
            foreach (Month M in Month) {
                foreach (Day D in M.Day) {
                    if (dayCount > m_Day.Length) {
                        // NOTE: when handling this exception do something like:
                        /*
                         * string exMessage = ErrHandler.GetMessage(ErrorCode, Year, DayCount);
                         * throw new InvalidOperationException(exMessage);
                         * 
                         */
                        string exMessage = string.Concat("Business calendar has too many days defined for this year. Year: ", ToString(), "Days: ", dayCount);
                        throw new InvalidOperationException(exMessage);
                    }
                    m_Day[dayCount++] = D;                    
                }
            }
            // resize the array based on the actual number of elements
            Array.Resize<Day>(ref m_Day, dayCount);
        }

        // ToString
        public override string ToString() {
            return No.ToString();
        }
        // ICompareable
        public int CompareTo(Year other) {
            return No.CompareTo(other.No);
        }
        // IEquatable
        public bool Equals(Year other) {
            return No.Equals(other.No);
        }

    }   // end of class

    /// <summary>
    /// Month
    /// </summary>
    public partial class Month : IComparable<Month>, IEquatable<Month> {

        /// <summary>
        /// Months
        /// </summary>
        private static Dictionary<int, string> s_Months = new Dictionary<int, string>() {
            {1, "January"},
            {2, "February"},
            {3, "March"},
            {4, "April"},
            {5, "May"},
            {6, "June"},
            {7, "July"},
            {8, "August"},
            {9, "September"},
            {10, "October"},
            {11, "November"},
            {12, "December"},
        };
        
        /// <summary>
        /// The Year
        /// </summary>
        public Year Year {
            get {
                return m_Year;
            }
        }
        // member
        private Year m_Year;
        
        /// <summary>
        /// Business Days 
        /// </summary>
        public Day[] BusinessDay {
            get {
                return Day.Where(TheDay => TheDay.BusinessDay == YesNo.Y).ToArray<Day>();            
            }            
        }        

        /// <summary>
        /// Get the first day of the month
        /// </summary>
        /// <returns></returns>
        public Day FirstDay {
            get {
                return Day.First();
            }
        }

        /// <summary>
        /// Get the first business day of the month
        /// </summary>
        public Day FirstBusinessDay {
            get {
                return Day.First(TheDay => TheDay.BusinessDay == YesNo.Y);
            }
        }

        /// <summary>
        /// Get the last day of the month
        /// </summary>
        /// <returns></returns>
        public Day LastDay {
            get {
                return Day.Last<Day>();
            }
        }

        /// <summary>
        /// Get the first business day of the month
        /// </summary>
        public Day LastBusinessDay {
            get {
                return Day.Last(TheDay => TheDay.BusinessDay == YesNo.Y);
            }
        }

        /// <summary>
        /// Constructor
        /// </summary>
        public Month() {
            dayField = new Day[0];
        }

        /// <summary>
        /// Create a new month
        /// </summary>
        /// <param name="p_monthNo">month number (1-12) inclusive</param>
        public Month(Year p_Year, int p_monthNo) 
            : this() {
            Construct(p_Year, p_monthNo);
        }

        /// <summary>
        /// Construct this month
        /// </summary>
        /// <param name="p_Year">the Year object</param>
        /// <param name="p_monthNo">the month number</param>
        private void Construct(Year p_Year, int p_monthNo) {
            // set the fields
            m_Year = p_Year;
            No = p_monthNo;
            Name = s_Months[p_monthNo];
            Abrev = Name.Substring(0, 3);            
            // create the days
            DateTime TheDate = new DateTime(Year.No, p_monthNo, 1);
            int dayIndex = 0;
            dayField = new Day[31];
            do {
                // create the day
                dayField[dayIndex++] = new Day(this, TheDate);
                // next day
                TheDate = TheDate.AddDays(1.0); 
            } while (TheDate.Month == No);
            // set the Day array to the correct length
            Array.Resize<Day>(ref dayField, dayIndex);
        }

        /// <summary>
        /// Get a specific day of the week
        /// </summary>
        /// <param name="p_weekNo">week number</param>
        /// <param name="p_dayNo">day of week number</param>
        /// <param name="p_useBusinessDay">business days only</param>
        /// <returns>the Day</returns>
        public Day GetWeekDay(int p_weekNo, int p_dayNo, YesNo p_useBusinessDay) {
            int weekNo = 1;
            int businessDay = 0;
            foreach (Day D in Day) {
                // new week?
                if (D.WeekDay == 1 && D.MonthDay != 1) {
                    businessDay = 0;
                    weekNo++;
                }
                // increment business day
                businessDay += D.BusinessDay == YesNo.Y ? 1 : 0;
                // check for match
                if (weekNo == p_weekNo && (p_useBusinessDay == YesNo.Y ? businessDay : D.WeekDay) == p_dayNo) {
                    return D;
                }
            }                     
            // no match
            throw new InvalidOperationException(string.Format("week {0}, day {1} does not exist in {2} {3} (useBusinessDay = {4})", p_weekNo, p_dayNo, Name, Year.No, p_useBusinessDay));
        }

        /// <summary>
        /// Build calendar object hierarchy
        /// </summary>
        /// <param name="p_BusinessCalendar">parent year</param>
        public void Init(Year p_Year) {
            // set parent year object
            m_Year = p_Year;                        
            // initialize each day in this month and add 
            foreach (Day D in Day) {                
                D.Init(this);             
            }     
            // sort the list
            Array.Sort<Day>(Day);
        }

        // ToString
        public override string ToString() {
            return string.Concat(Name, " ", Year.ToString());
        }
        // ICompareable
        public int CompareTo(Month other) {            
            return Year.CompareTo(other.Year) == 0 ? No.CompareTo(other.No) : Year.CompareTo(other.Year);
        }
        // IEquatable
        public bool Equals(Month other) {
            return CompareTo(other) == 0;
        }

    }   // end of class

    /// <summary>
    /// Day
    /// </summary>
    public partial class Day : IComparable<Day>, IEquatable<Day> {

        /// <summary>
        /// Months
        /// </summary>
        private static Dictionary<int, string> s_Days = new Dictionary<int, string>() {
            {1, "Monday"},
            {2, "Tuesday"},
            {3, "Wednesday"},            
            {4, "Thursday"},
            {5, "Friday"},
            {6, "Saturday"},
            {7, "Sunday"}            
        };

        /// <summary>
        /// The Month
        /// </summary>
        public Month Month {
            get {
                return m_Month;
            }
        }
        // member        
        private Month m_Month;

        /// <summary>
        /// The Date
        /// </summary>
        public DateTime Date {
            get {
                return m_Date;
            }
        }
        // the date
        private DateTime m_Date;

        /// <summary>
        /// Constructor
        /// </summary>
        public Day() {         
        }

        /// <summary>
        /// Constructor
        /// </summary>
        public Day(Month p_Month, DateTime p_Date) {
            Construct(p_Month, p_Date.Year, p_Date.Month, p_Date.Day);
        }

        /// <summary>
        /// Constructor
        /// </summary>
        public Day(Month p_Month, int p_year, int p_month, int p_monthDay) {
            Construct(p_Month, p_year, p_month, p_monthDay);
        }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="p_Date">DateTime</param>
        public Day(DateTime p_Date) {
            Construct(null, p_Date.Year, p_Date.Month, p_Date.Day);
        }

        /// <summary>
        /// Construct a Day object
        /// </summary>
        /// <param name="p_Date">based on this date</param>
        public void Construct(Month p_Month, int p_year, int p_month, int p_monthDay) {
            // set the date
            m_Date = new DateTime(p_year, p_month, p_monthDay);
            // set other fields
            MonthDay = m_Date.Day;
            YearDay = m_Date.DayOfYear;          
            // set date fields
            switch (m_Date.DayOfWeek) {
                case DayOfWeek.Monday: {
                    WeekDay = 1;
                    BusinessDay = YesNo.Y;
                    Name = "Monday";
                    Abrev = "Mon";
                    break;
                }
                case DayOfWeek.Tuesday: {
                    WeekDay = 2;
                    BusinessDay = YesNo.Y;
                    Name = "Tuesday";
                    Abrev = "Tue";
                    break;
                }
                case DayOfWeek.Wednesday: {
                    WeekDay = 3;
                    BusinessDay = YesNo.Y;
                    Name = "Wednesday";
                    Abrev = "Wed";
                    break;
                }
                case DayOfWeek.Thursday: {
                    WeekDay = 4;
                    BusinessDay = YesNo.Y;
                    Name = "Thursday";
                    Abrev = "Thu";
                    break;
                }
                case DayOfWeek.Friday: {
                    WeekDay = 5;
                    BusinessDay = YesNo.Y;
                    Name = "Friday";
                    Abrev = "Fri";
                    break;
                }
                case DayOfWeek.Saturday: {
                    WeekDay = 6;
                    BusinessDay = YesNo.N;
                    Name = "Saturday";
                    Abrev = "Sat";
                    break;
                }
                case DayOfWeek.Sunday: {
                    WeekDay = 7;
                    BusinessDay = YesNo.N;
                    Name = "Sunday";
                    Abrev = "Sun";
                    break;
                }
            } 
            // apply holiday schedule -- call some method here            
        }

        /// <summary>
        /// Build calendar object hierarchy
        /// </summary>
        /// <param name="p_BusinessCalendar">parent month</param>
        public void Init(Month p_Month) {
            // set parent year object
            m_Month = p_Month; 
            // create the date object
            m_Date = new DateTime(Month.Year.No, Month.No, MonthDay);            
        }

        /// <summary>
        /// Verify the calendar structure
        /// </summary>
        public void VerifyIntegrity() {
            throw new NotImplementedException();
        }

        // ToString
        public override string ToString() {
            return Date.ToLongDateString();
        }
        // ICompareable
        public int CompareTo(Day other) {
            return Date.CompareTo(other.Date);
        }
        // IEquatable
        public bool Equals(Day other) {
            return Date.Equals(other.Date);
        }

    }   // end of class
}
